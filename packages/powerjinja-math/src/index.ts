import { coreDefinitions } from "powerjinja-core";

import { abs } from "./definitions/abs";
import { acos } from "./definitions/acos";
import { acosh } from "./definitions/acosh";
import { acot } from "./definitions/acot";
import { acoth } from "./definitions/acoth";
import { acsc } from "./definitions/acsc";
import { acsch } from "./definitions/acsch";
import { addMatrix } from "./definitions/add-matrix";
import { add } from "./definitions/add";
import { asec } from "./definitions/asec";
import { asech } from "./definitions/asech";
import { asin } from "./definitions/asin";
import { asinh } from "./definitions/asinh";
import { atan } from "./definitions/atan";
import { atan2 } from "./definitions/atan2";
import { atanh } from "./definitions/atanh";
import { cbrt } from "./definitions/cbrt";
import { ceil } from "./definitions/ceil";
import { clamp } from "./definitions/clamp";
import { cos } from "./definitions/cos";
import { cosh } from "./definitions/cosh";
import { cot } from "./definitions/cot";
import { coth } from "./definitions/coth";
import { cross } from "./definitions/cross";
import { csc } from "./definitions/csc";
import { csch } from "./definitions/csch";
import { decrement } from "./definitions/decrement";
import { degrees } from "./definitions/degrees";
import { det2 } from "./definitions/det2";
import { det3 } from "./definitions/det3";
import { det4 } from "./definitions/det4";
import { distance } from "./definitions/distance";
import { divideMatrixByScalar } from "./definitions/divide-matrix-by-scalar";
import { divide } from "./definitions/divide";
import { dot } from "./definitions/dot";
import { e } from "./definitions/e";
import { exp } from "./definitions/exp";
import { exp2 } from "./definitions/exp2";
import { expm1 } from "./definitions/expm1";
import { floor } from "./definitions/floor";
import { frac } from "./definitions/frac";
import { hypot } from "./definitions/hypot";
import { identityMatrix } from "./definitions/identity-matrix";
import { increment } from "./definitions/increment";
import { invert } from "./definitions/invert";
import { ldexp } from "./definitions/ldexp";
import { length } from "./definitions/length";
import { ln } from "./definitions/ln";
import { ln10 } from "./definitions/ln10";
import { ln2 } from "./definitions/ln2";
import { lnp1 } from "./definitions/lnp1";
import { log } from "./definitions/log";
import { log10 } from "./definitions/log10";
import { log10e } from "./definitions/log10e";
import { log2 } from "./definitions/log2";
import { log2e } from "./definitions/log2e";
import { maxBy } from "./definitions/max-by";
import { max } from "./definitions/max";
import { meanBy } from "./definitions/mean-by";
import { mean } from "./definitions/mean";
import { minBy } from "./definitions/min-by";
import { min } from "./definitions/min";
import { mod } from "./definitions/mod";
import { modf } from "./definitions/modf";
import { multiplyMatrixByMatrix } from "./definitions/multiply-matrix-by-matrix";
import { multiplyMatrixByScalar } from "./definitions/multiply-matrix-by-scalar";
import { multiply } from "./definitions/multiply";
import { nan } from "./definitions/nan";
import { negate } from "./definitions/negate";
import { negativeInf } from "./definitions/negative-inf";
import { normalizeMatrix } from "./definitions/normalize-matrix";
import { pi } from "./definitions/pi";
import { positiveInf } from "./definitions/positive-inf";
import { pow } from "./definitions/pow";
import { radians } from "./definitions/radians";
import { random100 } from "./definitions/random100";
import { random1000 } from "./definitions/random1000";
import { rcbrt } from "./definitions/rcbrt";
import { remainder } from "./definitions/remainder";
import { round } from "./definitions/round";
import { rsqrt } from "./definitions/rsqrt";
import { sec } from "./definitions/sec";
import { sech } from "./definitions/sech";
import { sign } from "./definitions/sign";
import { sin } from "./definitions/sin";
import { sincos } from "./definitions/sincos";
import { sinh } from "./definitions/sinh";
import { sqrt } from "./definitions/sqrt";
import { sqrt1_2 } from "./definitions/sqrt1_2";
import { sqrt2 } from "./definitions/sqrt2";
import { subtractMatrix } from "./definitions/subtract-matrix";
import { subtract } from "./definitions/subtract";
import { sumBy } from "./definitions/sum-by";
import { sum } from "./definitions/sum";
import { tan } from "./definitions/tan";
import { tanh } from "./definitions/tanh";
import { transposeMatrix } from "./definitions/transpose-matrix";
import { trunc } from "./definitions/trunc";
import { zeroMatrix } from "./definitions/zero-matrix";

export const mathDefinitions = coreDefinitions;

mathDefinitions.define("powerjinja.math.abs", abs);
mathDefinitions.define("powerjinja.math.acos", acos);
mathDefinitions.define("powerjinja.math.acosh", acosh);
mathDefinitions.define("powerjinja.math.acot", acot);
mathDefinitions.define("powerjinja.math.acoth", acoth);
mathDefinitions.define("powerjinja.math.acsc", acsc);
mathDefinitions.define("powerjinja.math.acsch", acsch);
mathDefinitions.define("powerjinja.math.add_matrix", addMatrix);
mathDefinitions.define("powerjinja.math.add", add);
mathDefinitions.define("powerjinja.math.asec", asec);
mathDefinitions.define("powerjinja.math.asech", asech);
mathDefinitions.define("powerjinja.math.asin", asin);
mathDefinitions.define("powerjinja.math.asinh", asinh);
mathDefinitions.define("powerjinja.math.atan", atan);
mathDefinitions.define("powerjinja.math.atan2", atan2);
mathDefinitions.define("powerjinja.math.atanh", atanh);
mathDefinitions.define("powerjinja.math.cbrt", cbrt);
mathDefinitions.define("powerjinja.math.ceil", ceil);
mathDefinitions.define("powerjinja.math.clamp", clamp);
mathDefinitions.define("powerjinja.math.cos", cos);
mathDefinitions.define("powerjinja.math.cosh", cosh);
mathDefinitions.define("powerjinja.math.cot", cot);
mathDefinitions.define("powerjinja.math.coth", coth);
mathDefinitions.define("powerjinja.math.cross", cross);
mathDefinitions.define("powerjinja.math.csc", csc);
mathDefinitions.define("powerjinja.math.csch", csch);
mathDefinitions.define("powerjinja.math.decrement", decrement);
mathDefinitions.define("powerjinja.math.degrees", degrees);
mathDefinitions.define("powerjinja.math.det2", det2);
mathDefinitions.define("powerjinja.math.det3", det3);
mathDefinitions.define("powerjinja.math.det4", det4);
mathDefinitions.define("powerjinja.math.distance", distance);
mathDefinitions.define(
  "powerjinja.math.divide_matrix_by_scalar",
  divideMatrixByScalar
);
mathDefinitions.define("powerjinja.math.divide", divide);
mathDefinitions.define("powerjinja.math.dot", dot);
mathDefinitions.define("powerjinja.math.e", e);
mathDefinitions.define("powerjinja.math.exp", exp);
mathDefinitions.define("powerjinja.math.exp2", exp2);
mathDefinitions.define("powerjinja.math.expm1", expm1);
mathDefinitions.define("powerjinja.math.floor", floor);
mathDefinitions.define("powerjinja.math.frac", frac);
mathDefinitions.define("powerjinja.math.hypot", hypot);
mathDefinitions.define("powerjinja.math.identity_matrix", identityMatrix);
mathDefinitions.define("powerjinja.math.increment", increment);
mathDefinitions.define("powerjinja.math.invert", invert);
mathDefinitions.define("powerjinja.math.ldexp", ldexp);
mathDefinitions.define("powerjinja.math.length", length);
mathDefinitions.define("powerjinja.math.ln", ln);
mathDefinitions.define("powerjinja.math.ln10", ln10);
mathDefinitions.define("powerjinja.math.ln2", ln2);
mathDefinitions.define("powerjinja.math.lnp1", lnp1);
mathDefinitions.define("powerjinja.math.log", log);
mathDefinitions.define("powerjinja.math.log10", log10);
mathDefinitions.define("powerjinja.math.log10e", log10e);
mathDefinitions.define("powerjinja.math.log2", log2);
mathDefinitions.define("powerjinja.math.log2e", log2e);
mathDefinitions.define("powerjinja.math.max_by", maxBy);
mathDefinitions.define("powerjinja.math.max", max);
mathDefinitions.define("powerjinja.math.mean_by", meanBy);
mathDefinitions.define("powerjinja.math.mean", mean);
mathDefinitions.define("powerjinja.math.min_by", minBy);
mathDefinitions.define("powerjinja.math.min", min);
mathDefinitions.define("powerjinja.math.mod", mod);
mathDefinitions.define("powerjinja.math.modf", modf);
mathDefinitions.define(
  "powerjinja.math.multiply_matrix_by_matrix",
  multiplyMatrixByMatrix
);
mathDefinitions.define(
  "powerjinja.math.multiply_matrix_by_scalar",
  multiplyMatrixByScalar
);
mathDefinitions.define("powerjinja.math.multiply", multiply);
mathDefinitions.define("powerjinja.math.nan", nan);
mathDefinitions.define("powerjinja.math.negate", negate);
mathDefinitions.define("powerjinja.math.negative_inf", negativeInf);
mathDefinitions.define("powerjinja.math.normalize_matrix", normalizeMatrix);
mathDefinitions.define("powerjinja.math.pi", pi);
mathDefinitions.define("powerjinja.math.positive_inf", positiveInf);
mathDefinitions.define("powerjinja.math.pow", pow);
mathDefinitions.define("powerjinja.math.radians", radians);
mathDefinitions.define("powerjinja.math.random100", random100);
mathDefinitions.define("powerjinja.math.random1000", random1000);
mathDefinitions.define("powerjinja.math.rcbrt", rcbrt);
mathDefinitions.define("powerjinja.math.remainder", remainder);
mathDefinitions.define("powerjinja.math.round", round);
mathDefinitions.define("powerjinja.math.rsqrt", rsqrt);
mathDefinitions.define("powerjinja.math.sec", sec);
mathDefinitions.define("powerjinja.math.sech", sech);
mathDefinitions.define("powerjinja.math.sign", sign);
mathDefinitions.define("powerjinja.math.sin", sin);
mathDefinitions.define("powerjinja.math.sincos", sincos);
mathDefinitions.define("powerjinja.math.sinh", sinh);
mathDefinitions.define("powerjinja.math.sqrt", sqrt);
mathDefinitions.define("powerjinja.math.sqrt1_2", sqrt1_2);
mathDefinitions.define("powerjinja.math.sqrt2", sqrt2);
mathDefinitions.define("powerjinja.math.subtract_matrix", subtractMatrix);
mathDefinitions.define("powerjinja.math.subtract", subtract);
mathDefinitions.define("powerjinja.math.sum_by", sumBy);
mathDefinitions.define("powerjinja.math.sum", sum);
mathDefinitions.define("powerjinja.math.tan", tan);
mathDefinitions.define("powerjinja.math.tanh", tanh);
mathDefinitions.define("powerjinja.math.transpose_matrix", transposeMatrix);
mathDefinitions.define("powerjinja.math.trunc", trunc);
mathDefinitions.define("powerjinja.math.zero_matrix", zeroMatrix);
